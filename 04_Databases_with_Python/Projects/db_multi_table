{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You do not need to export or convert the database - simply upload the .sqlite file that your program creates. See the example code for the use of the connect() statement.\n",
    "\n",
    "Musical Track Database\n",
    "This application will read an iTunes export file in XML and produce a properly normalized database with this structure:\n",
    "\n",
    "CREATE TABLE Artist (\n",
    "    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n",
    "    name    TEXT UNIQUE\n",
    ");\n",
    "\n",
    "CREATE TABLE Genre (\n",
    "    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n",
    "    name    TEXT UNIQUE\n",
    ");\n",
    "\n",
    "CREATE TABLE Album (\n",
    "    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n",
    "    artist_id  INTEGER,\n",
    "    title   TEXT UNIQUE\n",
    ");\n",
    "\n",
    "CREATE TABLE Track (\n",
    "    id  INTEGER NOT NULL PRIMARY KEY \n",
    "        AUTOINCREMENT UNIQUE,\n",
    "    title TEXT  UNIQUE,\n",
    "    album_id  INTEGER,\n",
    "    genre_id  INTEGER,\n",
    "    len INTEGER, rating INTEGER, count INTEGER\n",
    ");\n",
    "If you run the program multiple times in testing or with different files, make sure to empty out the data before each run.\n",
    "\n",
    "You can use this code as a starting point for your application: http://www.pythonlearn.com/code/tracks.zip. The ZIP file contains the Library.xml file to be used for this assignment. You can export your own tracks from iTunes and create a database, but for the database that you turn in for this assignment, only use the Library.xml data that is provided.\n",
    "\n",
    "To grade this assignment, the program will run a query like this on your uploaded database and look for the data it expects to see:\n",
    "\n",
    "SELECT Track.title, Artist.name, Album.title, Genre.name \n",
    "    FROM Track JOIN Genre JOIN Album JOIN Artist \n",
    "    ON Track.genre_id = Genre.ID and Track.album_id = Album.id \n",
    "        AND Album.artist_id = Artist.id\n",
    "    ORDER BY Artist.name LIMIT 3\n",
    "\n",
    "The expected result of this query on your database is:\n",
    "Track\t\t\t\t\tArtist\tAlbum\tGenre\n",
    "Chase the Ace\t\t\t\tAC/DC\tWho Made Who\tRock\n",
    "D.T.\t\t\t\t\tAC/DC\tWho Made Who\tRock\n",
    "For Those About To Rock (We Salute You)\tAC/DC\tWho Made Who\tRock\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import xml.etree.ElementTree as ET\n",
    "import sqlite3\n",
    "\n",
    "path = 'E://Users/Trenton J. McKinney/Documents/Programming/Coursera/databases/'\n",
    "conn = sqlite3.connect(path + 'trackdb.sqlite')\n",
    "cur = conn.cursor()\n",
    "\n",
    "# Make some fresh tables using executescript()\n",
    "cur.executescript('''\n",
    "DROP TABLE IF EXISTS Artist;\n",
    "DROP TABLE IF EXISTS Album;\n",
    "DROP TABLE IF EXISTS Track;\n",
    "DROP TABLE IF EXISTS Genre;\n",
    "\n",
    "CREATE TABLE Artist (\n",
    "    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n",
    "    name    TEXT UNIQUE\n",
    ");\n",
    "\n",
    "CREATE TABLE Genre (\n",
    "    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n",
    "    name    TEXT UNIQUE\n",
    ");\n",
    "\n",
    "CREATE TABLE Album (\n",
    "    id  INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE,\n",
    "    artist_id  INTEGER,\n",
    "    title   TEXT UNIQUE\n",
    ");\n",
    "\n",
    "CREATE TABLE Track (\n",
    "    id  INTEGER NOT NULL PRIMARY KEY \n",
    "        AUTOINCREMENT UNIQUE,\n",
    "    title TEXT  UNIQUE,\n",
    "    album_id  INTEGER,\n",
    "    genre_id  INTEGER,\n",
    "    len INTEGER, rating INTEGER, count INTEGER\n",
    ");\n",
    "''')\n",
    "\n",
    "# f_name = raw_input('Enter file name: ')\n",
    "f_name = 'E:/Users/Trenton J. McKinney/Documents/Programming/Coursera/Projects/Library.xml'\n",
    "if len(f_name) < 1:\n",
    "    f_name = 'Library.xml'\n",
    "\n",
    "\n",
    "# <key>Track ID</key><integer>369</integer>\n",
    "# <key>Name</key><string>Another One Bites The Dust</string>\n",
    "# <key>Artist</key><string>Queen</string>\n",
    "# <key>Genre</key><string>Rock</string>\n",
    "\n",
    "def lookup(d, key):\n",
    "    found = False\n",
    "    for child in d:\n",
    "        if found:\n",
    "            return child.text\n",
    "        if child.tag == 'key' and child.text == key:\n",
    "            found = True\n",
    "    return None\n",
    "\n",
    "\n",
    "stuff = ET.parse(f_name)\n",
    "all = stuff.findall('dict/dict/dict')\n",
    "print 'Dict count:', len(all)\n",
    "for entry in all:\n",
    "    if lookup(entry, 'Track ID') is None:\n",
    "        continue\n",
    "\n",
    "    name = lookup(entry, 'Name')\n",
    "    artist = lookup(entry, 'Artist')\n",
    "    album = lookup(entry, 'Album')\n",
    "    genre = lookup(entry, 'Genre')\n",
    "    count = lookup(entry, 'Play Count')\n",
    "    rating = lookup(entry, 'Rating')\n",
    "    length = lookup(entry, 'Total Time')\n",
    "\n",
    "    if name is None or artist is None or album is None or genre is None:\n",
    "        continue\n",
    "\n",
    "    print name, artist, album, genre, count, rating, length\n",
    "\n",
    "    cur.execute('''INSERT OR IGNORE INTO Artist (name) \n",
    "        VALUES ( ? )''', (artist,))\n",
    "    cur.execute('SELECT id FROM Artist WHERE name = ? ', (artist,))\n",
    "    artist_id = cur.fetchone()[0]\n",
    "\n",
    "    cur.execute('''INSERT OR IGNORE INTO Album (title, artist_id) \n",
    "        VALUES ( ?, ? )''', (album, artist_id))\n",
    "    cur.execute('SELECT id FROM Album WHERE title = ? ', (album,))\n",
    "    album_id = cur.fetchone()[0]\n",
    "\n",
    "    cur.execute('''INSERT OR IGNORE INTO Genre (name)\n",
    "        VALUES ( ? )''', (genre,))\n",
    "    cur.execute('SELECT id FROM Genre WHERE name = ?', (genre,))\n",
    "    genre_id = cur.fetchone()[0]\n",
    "\n",
    "    cur.execute('''INSERT OR REPLACE INTO Track\n",
    "        (title, album_id, genre_id, len, rating, count)\n",
    "        VALUES ( ?, ?, ?, ?, ?, ? )''',\n",
    "                (name, album_id, genre_id, length, rating, count))\n",
    "\n",
    "    conn.commit()"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 0
}